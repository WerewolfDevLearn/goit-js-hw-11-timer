{"version":3,"sources":["webpack:///./templates/timer-tamplet.hbs","webpack:///./js/timer.js"],"names":["Handlebars","module","exports","template","container","depth0","helpers","partials","data","timerMarkup","timerMarkupTemplate","countDown","obj","this","_selector","selector","_targetDate","targetDate","markup","getTimeNow","Date","now","getFutureDateMs","getTime","getTimeInteval","getDayNumber","timeMs","Math","floor","getHoursNumber","getMinsNumber","getSecsNumber","getTagRef","document","querySelector","insertTimerMarkup","element","insertAdjacentHTML","getDaysPositionRef","getHoursPositionRef","getMinsPositionRef","getSecsPositionRef","futureDate","timerContainer","setInterval","interval","days","hours","mins","secs","dayRef","hoursRef","minsRef","secsRef","textContent","String","padStart"],"mappings":"8EAAA,IAAIA,EAAa,EAAQ,QAEzBC,EAAOC,SAAWF,EAAoB,SAAKA,GAAYG,SAAS,CAAC,SAAW,CAAC,EAAE,YAAY,KAAO,SAASC,EAAUC,EAAOC,EAAQC,EAASC,GACzI,MAAO,4iBACT,SAAU,K,0QCHZ,IAAMC,E,MAAcC,KA+EdC,EAAY,I,WA5EhB,WAAYC,GACVC,KAAKC,UAAYF,EAAIG,SACrBF,KAAKG,YAAcJ,EAAIK,WACvBJ,KAAKK,OAAST,E,iCAShBU,WAAA,WAEE,OADkBC,KAAKC,O,EAGzBC,gBAAA,WAEE,OADqBT,KAAKG,YAAYO,W,EAIxCC,eAAA,WAEE,OADqBX,KAAKS,kBAAoBT,KAAKM,c,EAIrDM,aAAA,SAAaC,GAEX,OADaC,KAAKC,MAAMF,EAAS,Q,EAInCG,eAAA,SAAeH,GAEb,OADcC,KAAKC,MAAOF,EAAS,MAAV,O,EAI3BI,cAAA,SAAcJ,GAEZ,OADaC,KAAKC,MAAOF,EAAS,KAAV,M,EAI1BK,cAAA,SAAcL,GAEZ,OADaC,KAAKC,MAAOF,EAAS,IAAe,M,EAInDM,UAAA,WAEE,OADkBC,SAASC,cAAT,GAA0BrB,KAAKC,Y,EAInDqB,kBAAA,SAAkBC,GAChBA,EAAQC,mBAAmB,aAAcxB,KAAKK,S,EAGhDoB,mBAAA,WAEE,OADwBL,SAASC,cAAc,4B,EAIjDK,oBAAA,WAEE,OADyBN,SAASC,cAAc,6B,EAIlDM,mBAAA,WAEE,OADwBP,SAASC,cAAc,4B,EAIjDO,mBAAA,WAEE,OADwBR,SAASC,cAAc,4B,qCAlEpCnB,GACXF,KAAKC,UAAYC,I,+BAEJ2B,GACb7B,KAAKG,YAAc0B,O,gCAmEL,CAAmB,CACnC3B,SAAU,WACVE,WAAY,IAAIG,KAAK,kBAGjBuB,EAAiBhC,EAAUqB,YAEjCrB,EAAUwB,kBAAkBQ,GAkBXC,aAhBjB,WACE,IAAMC,EAAWlC,EAAUa,iBACrBsB,EAAOnC,EAAUc,aAAaoB,GAC9BE,EAAQpC,EAAUkB,eAAegB,GACjCG,EAAOrC,EAAUmB,cAAce,GAC/BI,EAAOtC,EAAUoB,cAAcc,GAC/BK,EAASvC,EAAU2B,qBACnBa,EAAWxC,EAAU4B,sBACrBa,EAAUzC,EAAU6B,qBACpBa,EAAU1C,EAAU8B,qBAC1BS,EAAOI,YAAcC,OAAOT,GAAMU,SAAS,EAAG,KAC9CL,EAASG,YAAcC,OAAOR,GAAOS,SAAS,EAAG,KACjDJ,EAAQE,YAAcC,OAAOP,GAAMQ,SAAS,EAAG,KAC/CH,EAAQC,YAAcC,OAAON,GAAMO,SAAS,EAAG,OAGJ,O","file":"main.d5c1b6780e8034eac022.js","sourcesContent":["var Handlebars = require(\"../../node_modules/handlebars/runtime.js\");\nfunction __default(obj) { return obj && (obj.__esModule ? obj[\"default\"] : obj); }\nmodule.exports = (Handlebars[\"default\"] || Handlebars).template({\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    return \"    <div class=\\\"field\\\">\\n      <span class=\\\"value\\\" data-value=\\\"days\\\">11</span>\\n      <span class=\\\"label\\\">Days</span>\\n    </div>\\n  \\n    <div class=\\\"field\\\">\\n      <span class=\\\"value\\\" data-value=\\\"hours\\\">11</span>\\n      <span class=\\\"label\\\">Hours</span>\\n    </div>\\n  \\n    <div class=\\\"field\\\">\\n      <span class=\\\"value\\\" data-value=\\\"mins\\\">11</span>\\n      <span class=\\\"label\\\">Minutes</span>\\n    </div>\\n  \\n    <div class=\\\"field\\\">\\n      <span class=\\\"value\\\" data-value=\\\"secs\\\">11</span>\\n      <span class=\\\"label\\\">Seconds</span>\\n    </div>\\n  </div>\";\n},\"useData\":true});","import timerMarkupTemplate from '../templates/timer-tamplet.hbs';\nconst timerMarkup = timerMarkupTemplate();\n\nclass CountdownTimer {\n  constructor(obj) {\n    this._selector = obj.selector;\n    this._targetDate = obj.targetDate;\n    this.markup = timerMarkup;\n  }\n  set selector(selector) {\n    this._selector = selector;\n  }\n  set targetDate(futureDate) {\n    this._targetDate = futureDate;\n  }\n\n  getTimeNow() {\n    const timeNowMs = Date.now();\n    return timeNowMs;\n  }\n  getFutureDateMs() {\n    const futureDateMs = this._targetDate.getTime();\n    return futureDateMs;\n  }\n\n  getTimeInteval() {\n    const timeInterval = this.getFutureDateMs() - this.getTimeNow();\n    return timeInterval;\n  }\n\n  getDayNumber(timeMs) {\n    const days = Math.floor(timeMs / (1000 * 60 * 60 * 24));\n    return days;\n  }\n\n  getHoursNumber(timeMs) {\n    const hours = Math.floor((timeMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    return hours;\n  }\n\n  getMinsNumber(timeMs) {\n    const mins = Math.floor((timeMs % (1000 * 60 * 60)) / (1000 * 60));\n    return mins;\n  }\n\n  getSecsNumber(timeMs) {\n    const secs = Math.floor((timeMs % (1000 * 60)) / 1000);\n    return secs;\n  }\n\n  getTagRef() {\n    const container = document.querySelector(`${this._selector}`);\n    return container;\n  }\n\n  insertTimerMarkup(element) {\n    element.insertAdjacentHTML('afterbegin', this.markup);\n  }\n\n  getDaysPositionRef() {\n    const daysPositionRef = document.querySelector('span[data-value=\"days\"]');\n    return daysPositionRef;\n  }\n\n  getHoursPositionRef() {\n    const hoursPositionRef = document.querySelector('span[data-value=\"hours\"]');\n    return hoursPositionRef;\n  }\n\n  getMinsPositionRef() {\n    const minsPositionRef = document.querySelector('span[data-value=\"mins\"]');\n    return minsPositionRef;\n  }\n\n  getSecsPositionRef() {\n    const secsPositionRef = document.querySelector('span[data-value=\"secs\"]');\n    return secsPositionRef;\n  }\n}\n\nconst countDown = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Aug 17, 2020'),\n});\n\nconst timerContainer = countDown.getTagRef();\n\ncountDown.insertTimerMarkup(timerContainer);\n\nfunction timerInplement() {\n  const interval = countDown.getTimeInteval();\n  const days = countDown.getDayNumber(interval);\n  const hours = countDown.getHoursNumber(interval);\n  const mins = countDown.getMinsNumber(interval);\n  const secs = countDown.getSecsNumber(interval);\n  const dayRef = countDown.getDaysPositionRef();\n  const hoursRef = countDown.getHoursPositionRef();\n  const minsRef = countDown.getMinsPositionRef();\n  const secsRef = countDown.getSecsPositionRef();\n  dayRef.textContent = String(days).padStart(3, '0');\n  hoursRef.textContent = String(hours).padStart(2, '0');\n  minsRef.textContent = String(mins).padStart(2, '0');\n  secsRef.textContent = String(secs).padStart(2, '0');\n}\n\nconst runTimer = setInterval(timerInplement, 1000);\n"],"sourceRoot":""}